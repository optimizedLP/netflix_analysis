# -*- coding: utf-8 -*-
"""netflix_analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Zh4Kft3AxPW0mWLr86q03evgh62aCZgl

## Netflix Movie Analysis: Exploring Cinematic Trends with Python.

Pretend you're a detective for Netflix movies. Your job is to figure out everything about Netflix's collection of movies up until June 1st, 2021. You've got a massive list of movies that feels like a big puzzle waiting to be solved.

You found all this information by digging through a Wikipedia page, grabbing details about movie genres, directors, and other cool facts. The interesting twist is you also have IMDb ratings. It's like having a bunch of people's opinions on the movies, with over 1,000 reviews for most of them. That's a whole lot of thoughts!

Your task is to become the detective of Netflix. Discover which movies people really like, identify those directors who are like wizards in making movies, and check if there's a pattern between how good a movie is and its release date. Are the types of popular movies changing over time? Are there any unexpected findings in your investigation?

Think of yourself as the hero in this adventure of data, uncovering the secrets behind Netflix movies. The data is like your helpful partner, eager to reveal what makes Netflix movies special.

###Load the Netflix Dataset
"""

import pandas as pd

df = pd.read_csv('NetflixOriginals.csv', encoding='latin-1')
df

"""## Classify the datatypes"""

dtype = df.dtypes
dtype

"""## Lowercasing Netflix Originals
(this step is helpful when extracting column names.)
"""

df.columns = df.columns.str.lower()
df

"""## Determining the null values in the dataset & removing them."""

null_values = (df.isnull()).sum()
null_values

df.dropna(inplace = True)
df

"""## Identifying & removing the duplicates in the dataset."""

duplicates = duplicates = df.duplicated().sum()
df.drop_duplicates(inplace = True)
df

"""## Converting the dataset 'premiere' object to date-time

(the column 'premiere' is in string format but contains date so change the format which is date-time friendly.)
"""

df['premiere'] = pd.to_datetime(df['premiere'], errors='coerce')
df

"""## Identifying cinematic epochs with year extraction

(adding the column 'year' which indicates the year when the movie premiered.)
"""

df['year'] = df['premiere'].dt.year
df

"""## Standardizing IMDb Score column in the dataset.

(ensuring all the column names are without spaces between words. This is helpful for bug-free extraction in SQL.)
"""

df.rename(columns={'imdb score': 'imdb_score'}, inplace=True)
df

"""## Archiving refined dataset.

(dataset is cleaner to export for SQL analysis.)
"""

df.to_csv('netflix.csv', index=False)

"""## Let's use the new cleaner dataset 'netflix.csv' for analysis."""

import pandas as pd

# Load the dataset
netflix_data = pd.read_csv("netflix.csv")
netflix_data

"""### 1: Counting Cinematic Uniqueness: Distinct Titles in the Netflix Collection."""

unique_titles_count = netflix_data['title'].nunique()
print("Number of unique content entries in the dataset:", unique_titles_count)

"""### 2: Netflix Gems with IMDb Scores Above 7."""

highly_rated_content = netflix_data[netflix_data['imdb_score'] > 7]
print("Details of movies and shows with IMDb scores above 7:")
print(highly_rated_content)

"""### 3: Counting Netflix Movies by Language."""

movies_by_language = netflix_data.groupby('language').size().reset_index(name='Movie_Count')
print("Number of movies in each language:")
print(movies_by_language)

"""### Let's visualize this result."""

import matplotlib.pyplot as plt
import seaborn as sns

# Task 4: Counting Netflix Movies by Language.
plt.figure(figsize=(12, 6))
sns.barplot(x='Movie_Count', y='language', data=movies_by_language)
plt.title('Number of Netflix Movies by Language')
plt.xlabel('Number of Movies')
plt.ylabel('Language')
plt.show()

"""### 4: Unveiling the Average IMDb Scores in Netflix Originals."""

average_scores_by_genre = netflix_data.groupby('genre')['imdb_score'].mean().reset_index(name='Avg_Score')
print("Average IMDb scores in Netflix Originals by genre:")
print(average_scores_by_genre)

"""### Task 6: Netflix Genres with the Highest Average IMDb Scores."""

top_genres = average_scores_by_genre.nlargest(5, 'Avg_Score')
print("Top 5 genres based on their average IMDb scores:")
print(top_genres)

"""### Let's visualize this result."""

import matplotlib.pyplot as plt
import seaborn as sns

# Task 6: Netflix Genres with the Highest Average IMDb Scores.
plt.figure(figsize=(10, 6))
sns.barplot(x='Avg_Score', y='genre', data=top_genres, palette='viridis')
plt.title('Top 5 Genres Based on Average IMDb Scores')
plt.xlabel('Average IMDb Score')
plt.ylabel('Genre')
plt.show()

"""### 6: Netflix Movies Surpassing Genre IMDb Score Averages."""

above_average_content = pd.merge(netflix_data, average_scores_by_genre, on='genre', suffixes=('', '_avg'))
above_average_content = above_average_content[above_average_content['imdb_score'] > above_average_content['Avg_Score']]
print("Details of content with above-average IMDb scores within each genre:")
print(above_average_content)

"""### 7: Counting Netflix Movies by Genre Before 2020."""

movies_before_2020 = netflix_data[netflix_data['premiere'].str[:4].astype(int) < 2020].groupby('genre').size().reset_index(name='Movie_Count')
print("Number of movies in each genre before 2020:")
print(movies_before_2020)

"""### 8: The Highest Rated Netflix Movie."""

highest_rated_movie = netflix_data[netflix_data['imdb_score'] == netflix_data['imdb_score'].max()]
print("Details of the highest-rated Netflix movie:")
print(highest_rated_movie)

"""### 9: Netflix Movies with Similar Premieres."""

similar_premieres = pd.merge(netflix_data, netflix_data, on='genre')
similar_premieres = similar_premieres[(similar_premieres['title_x'] != similar_premieres['title_y']) &
                                      (abs(pd.to_datetime(similar_premieres['premiere_x']) - pd.to_datetime(similar_premieres['premiere_y'])).dt.days <= 7)]
similar_premieres = similar_premieres[['title_x', 'title_y', 'genre']].drop_duplicates()
print("Movies with similar genres released within a week of each other:")
print(similar_premieres)

"""### 10: Genre Dominance Through the Years: Unveiling Top-Ranked Genres."""

top_genre_by_year = netflix_data.groupby(['year', 'genre']).agg(avg_imdb_score=('imdb_score', 'mean')).reset_index()
top_genre_by_year = top_genre_by_year.sort_values(by=['year', 'avg_imdb_score'], ascending=[True, False]).groupby('year').head(1)
print("Top-ranked genre based on ratings for each year:")
print(top_genre_by_year)

"""## Let's visualize the above result."""

plt.figure(figsize=(12, 6))
sns.barplot(x='year', y='avg_imdb_score', hue='genre', data=top_genre_by_year)
plt.title('Top-Ranked Genre Based on Ratings for Each Year')
plt.xlabel('Year')
plt.ylabel('Average IMDb Score')
plt.legend(title='Genre', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

